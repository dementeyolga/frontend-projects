import{B as o,H as c,S as i,a as d,b as p}from"./index-DPcE-bz1.js";const _=(r,e)=>new o({tagName:"h1",className:r,textContent:e}),C=(r,...e)=>new o({tagName:"div",className:r},...e),N=(r,...e)=>new o({tagName:"main",className:r},...e),T=(r,e)=>new o({tagName:"p",className:e,textContent:r}),j=(r,...e)=>new o({tagName:"table",className:r},...e),E=(r,...e)=>new o({tagName:"tr",className:r},...e),A=(r,e)=>new o({tagName:"td",className:e,textContent:r}),v=(r,e)=>new o({tagName:"svg",className:e,innerHTML:r}),f="_button_idwge_1",g="_primary_idwge_18",w="_secondary_idwge_35",y={button:f,primary:g,secondary:w};class h extends o{constructor(e,t,n,s,l){super({tagName:"button",type:t,textContent:n,className:`${e} ${y.button}`,disabled:l}),s&&(this.element.dataset.navigate=s)}setParameters(e){super.setParameters(e);const{type:t,disabled:n}=e;t&&(this.element.type=t),n&&(this.element.disabled=n)}disable(){this.element.disabled=!0}enable(){this.element.disabled=!1}}const m="_header_zwwew_1",$={header:m};class P extends o{constructor(){super({tagName:"header",className:$.header},new h("","button","To garage","#"),new h("","button","Winners table","winners"))}}const S=6,a="http://127.0.0.1:3000";async function O(r,e){try{let t=`${a}/garage/`;if(arguments.length){t+="?";const s=[];r&&s.push(`_page=${r}`),e&&s.push(`_limit=${e}`),t+=s.join("&")}return await(await fetch(t)).json()}catch{return console.error("An error occured"),null}}async function W(r){try{return await(await fetch(`${a}/garage/${r}`)).json()}catch{return console.error("An error occured"),null}}async function B(r){try{const e=await fetch(`${a}/garage`,{method:c.POST,headers:{"Content-Type":"application/json"},body:JSON.stringify(r)}),{status:t}=e;return t===i.Created?await e.json():null}catch(e){return console.error(`An error occured ${e}`),null}}async function H(r){try{await fetch(`${a}/garage/${r}`,{method:c.DELETE})}catch(e){console.error(`An error occured ${e}`)}}async function I(r){try{const{id:e,name:t,color:n}=r,s=await fetch(`${a}/garage/${e}`,{method:c.PUT,headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t,color:n})}),{status:l}=s;return l===i.OK?await s.json():null}catch(e){return console.error(`An error occured ${e}`),null}}async function R(r,e){try{const t=await fetch(`${a}/engine?id=${r}&status=${e}`,{method:c.PATCH}),{status:n}=t;if(n===d.BadRequest)console.error('Wrong parameters: "id" should be any positive number, "status" should be "started", "stopped" or "drive"');else if(n===d.NotFound)console.error("Car with such id was not found in the garage.");else if(n===i.OK)return await t.json();return null}catch(t){return console.error(`An error occured ${t}`),null}}async function q(r){try{const e=await fetch(`${a}/engine?id=${r}&status=drive`,{method:c.PATCH}),{status:t}=e;return t===i.OK?await e.json():(t===d.BadRequest?console.error('Wrong parameters: "id" should be any positive number, "status" should be "started", "stopped" or "drive"'):t===d.NotFound?console.error('Engine parameters for car with such id was not found in the garage. Have you tried to set engine status to "started" before?'):t===d.TooManyRequests?console.error("Drive already in progress. You can't run drive for the same car twice while it's not stopped."):t===p.InternalError&&console.error("Car has been stopped suddenly. It's engine was broken down."),{success:!1})}catch(e){return console.error(`An error occured ${e}`),{success:!1}}}async function D(r,e,t,n){try{let s=`${a}/winners`;if(arguments.length){s+="?";const u=[];r&&u.push(`_page=${r}`),e&&u.push(`_limit=${e}`),t&&u.push(`_sort=${t}`),n&&u.push(`_order=${n}`),s+=u.join("&")}return await(await fetch(s)).json()}catch(s){return console.error(s),null}}async function J(r){try{return await(await fetch(`${a}/winners/${r}`)).json()}catch{return console.error("An error occured"),null}}async function K(r){try{const e=await fetch(`${a}/winners`,{method:c.POST,headers:{"Content-Type":"application/json"},body:JSON.stringify(r)}),{status:t}=e;return t===i.Created?(console.log("Winner successfully created"),await e.json()):(t===p.InternalError&&console.error("Error: Insert failed, duplicate id"),null)}catch(e){return console.error(`An error occured ${e}`),null}}async function L(r){try{await fetch(`${a}/winners/${r}`,{method:c.DELETE})}catch(e){console.error(`An error occured ${e}`)}}async function x(r,e,t){try{const n=await fetch(`${a}/winners/${r}`,{method:c.PUT,headers:{"Content-Type":"application/json"},body:JSON.stringify({wins:e,time:t})}),{status:s}=n;return s===i.OK?await n.json():null}catch(n){return console.error(`An error occured ${n}`),null}}export{h as B,P as H,S as L,R as a,q as b,B as c,C as d,H as e,L as f,O as g,_ as h,J as i,x as j,K as k,D as l,N as m,E as n,A as o,T as p,W as q,v as s,j as t,I as u};
